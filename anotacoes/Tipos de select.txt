  
  
  
  
  
  public function index(){
       
       //devolvendo todos os dados da tabela  
       // $clients = DB::table('clients')->get();

       //apresentando dados em um array associativo 
       //$clients = DB::table('clients')->get()->toArray();

       //apresentando dados em um array de arrays associativos 
       // $clients = DB::table('clients')->get()->map(function($item){
       //    return (array) $item });

       //apresentando dados apartir dos resulttados
       //   $products = DB::table('products')->get();
       //   foreach($products as $product){
       //      echo $product->product_name.'<br>';
       //  }

       //obter apenas algumas coluna, no caso abaixo eu so quero nome e preço 
       // $products = DB::table('products')->get(['product_name','price']);
       // $this->showTableData($products);

       //obter somente a primeira linha do resultado 
       //$products = DB::table('products')->get()->first();

       // //obter somente a ultima linha do resultado 
      // $products = DB::table('products')->get()->last();

       $this->showRawData($products);



       //select usando o where no caso abaixo eu quero selecionar o porduto cujo o id e 10 
      //$products = DB::table('products')->where('id',10)->get();

      //agora eu faço um teste logico onde eu quero selecionar varirios produtos com o id igual maior que 10 
      // $products = DB::table('products')->where('id','>=',10)->get();

      // selecionando produtos com o valor maior que 50,00
      // $products = DB::table('products')
      //              ->where('price','>',50)
      //              ->get();
      //

     //selecionando os produtos que tem o valor maioro ou igual a 50 e que comecem com a letra a  
     //  $products = DB::table('products')
     //               ->where('price','>',50)
     //               ->where('product_name','like','A%')
     //               ->get();


     //nesse caso eu posso inserir mais condições dentro do where usando um array de condições  
     //no caso as condiçoes ficam dentro de um sub array


     //   $products = DB::table('products')
     //                 ->where([
     //                     ['price','>',50],
     //                     ['product_name','like','A%']
     //                 ]
     //                 )
     //                 ->get();


     //Aqui eu uso a função orWhere para fazer buscas mais complexas

     //   $products = DB::table('products')
     //                 ->where('price','>',90)
     //                 ->orWhere(function(Builder $query){
     //                    $query->where('product_name','Banana')
     //                          ->orWhere('product_name','cereja');
     //                 })->get();


    //excluindo uma possibilidades da busca, na busca abaixo eu não quero nenhum porduto que o nome comece com a letra M 

    $products = DB::table('products')->where('product','not like','M%')->get();
 
    //aqui eu faço a amesa cois so que usando a função 

    $products = DB::table('products')->whereNot('product','like','M%')->get();

    //selecionando produtos com o preço entre 2 valores

    $products = DB::table('products')->whereBetween('price',[25,50])->get();

    //selecionando produtos que não estão como preço entre 2 valores

    $products = DB::table('products')->whereNotBetween('price',[25,50])->get();

    // $products = DB::table('products')->whereIn('id',[1,2,3])->get();
       
       //selecionando produtso que estão com o campo soft delete preenchido
       
      // $products = DB::table('products')->whereNotNull('deleted_at')->get();

      //selecionando produtos cadastrados em 2032-10-17 

      //  $products = DB::table('products')->whereDate('created_at','2032-10-17')->get();

      //produtos criados no dia 10 

      // $products = DB::table('products')->whereDay('created_at','10')->get();


       


       
       
       


       

    }
